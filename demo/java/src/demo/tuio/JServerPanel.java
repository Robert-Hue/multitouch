/*
 * Copyright (C) 2007 Deutsche Telekom AG Laboratories
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

package demo.tuio;

import java.awt.Component;
import java.util.ArrayList;
import java.util.Collection;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 *
 * @author Michael Nischt
 * @version 0.1
 */

class JServerPanel extends javax.swing.JPanel
{

    class Event extends java.util.EventObject
    {

        private boolean cancelled;

        Event()
        {
            super(JServerPanel.this);
        }

        public String getHost()
        {
            return JServerPanel.this.getHost();
        }

        public int getPort()
        {
            return JServerPanel.this.getPort();
        }

        public void cancel(String status)
        {
            jStatusLabel.setText(status);
            cancelled = true;
        }

        private boolean isCancelled()
        {
            return cancelled;
        }
    }

    static interface Listener extends java.util.EventListener
    {

        public void finished(Event e);

        public void cancelled(Event e);
    }

    public JServerPanel()
    {
        initComponents();
    }

    public String getHost()
    {
        return jHostTextField.getText();
    }

    public int getPort()
    {
        return (Integer) jPortSpinner.getValue();
    }

    public void addServerPanelListener(Listener l)
    {
        listeners.add(l);
    }

    public void removeServerPanelListener(Listener l)
    {
        listeners.add(l);
    }

    public Listener[] getServerPanelListener()
    {
        return listeners.toArray(new Listener[0]);
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        javax.swing.JButton jOKButton = new javax.swing.JButton();
        javax.swing.JButton jCancelButton = new javax.swing.JButton();
        javax.swing.JPanel jAddressPanel = new javax.swing.JPanel();
        javax.swing.JLabel jHostLabel = new javax.swing.JLabel();
        jHostTextField = new javax.swing.JTextField();
        javax.swing.JLabel jPortLabel = new javax.swing.JLabel();
        jPortSpinner = new javax.swing.JSpinner();
        javax.swing.JPanel jCameraPanel = new javax.swing.JPanel();
        jResolutionLabel = new javax.swing.JLabel();
        jResolutionComboBox = new javax.swing.JComboBox();
        javax.swing.JButton jPreviewButton = new javax.swing.JButton();

        jStatusLabel.setForeground(java.awt.Color.red);
        jStatusLabel.setText("     ");

        jOKButton.setText("OK");
        jOKButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jOKButtonActionPerformed(evt);
            }
        });

        jCancelButton.setText("Cancel");
        jCancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jCancelButtonActionPerformed(evt);
            }
        });

        jAddressPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(" Internet Socket Address "));

        jHostLabel.setLabelFor(jHostTextField);
        jHostLabel.setText("Host:");

        jHostTextField.setText("localhost");

        jPortLabel.setLabelFor(jPortSpinner);
        jPortLabel.setText("Port:");

        jPortSpinner.setModel(new javax.swing.SpinnerNumberModel(57110, 49152, 65535, 1));
        jPortSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(jPortSpinner, "#"));

        javax.swing.GroupLayout jAddressPanelLayout = new javax.swing.GroupLayout(jAddressPanel);
        jAddressPanel.setLayout(jAddressPanelLayout);
        jAddressPanelLayout.setHorizontalGroup(
            jAddressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jAddressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jHostLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jHostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(jPortLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 57, Short.MAX_VALUE)
                .addContainerGap())
        );
        jAddressPanelLayout.setVerticalGroup(
            jAddressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jAddressPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jAddressPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jHostLabel)
                    .addComponent(jPortLabel)
                    .addComponent(jHostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPortSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jCameraPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(" Camera Settings "));

        jResolutionLabel.setLabelFor(jResolutionComboBox);
        jResolutionLabel.setText("Resolution:");

        jResolutionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1024 x 768" }));
        jResolutionComboBox.setRenderer(new ComboBoxRenderer());

        jPreviewButton.setText("Preview");
        jPreviewButton.setEnabled(false);

        javax.swing.GroupLayout jCameraPanelLayout = new javax.swing.GroupLayout(jCameraPanel);
        jCameraPanel.setLayout(jCameraPanelLayout);
        jCameraPanelLayout.setHorizontalGroup(
            jCameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jCameraPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jResolutionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jResolutionComboBox, 0, 134, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPreviewButton)
                .addContainerGap())
        );
        jCameraPanelLayout.setVerticalGroup(
            jCameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jCameraPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jCameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jResolutionLabel)
                    .addComponent(jResolutionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPreviewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCameraPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jAddressPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jStatusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 176, Short.MAX_VALUE)
                        .addComponent(jCancelButton)
                        .addGap(4, 4, 4)
                        .addComponent(jOKButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jAddressPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCameraPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jOKButton)
                    .addComponent(jCancelButton)
                    .addComponent(jStatusLabel))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

private void jOKButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOKButtonActionPerformed
    final Event e = new Event();
    for(Listener l : listeners) 
    {
        l.finished(e);
        if(e.isCancelled()) break;
    }
}//GEN-LAST:event_jOKButtonActionPerformed

private void jCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelButtonActionPerformed
    final Event e = new Event();
    for(Listener l : listeners) l.cancelled(e);
}//GEN-LAST:event_jCancelButtonActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jHostTextField;
    private javax.swing.JSpinner jPortSpinner;
    private javax.swing.JComboBox jResolutionComboBox;
    private javax.swing.JLabel jResolutionLabel;
    private final javax.swing.JLabel jStatusLabel = new javax.swing.JLabel();
    // End of variables declaration//GEN-END:variables
    private Collection<Listener> listeners = new ArrayList<Listener>();
 
    
    private static class ComboBoxRenderer extends JLabel implements ListCellRenderer 
    {    
        public ComboBoxRenderer() 
        {
            setOpaque(true);
            setHorizontalAlignment(CENTER);//RIGHT);
            setVerticalAlignment(CENTER);
        }

        /*
         * This method finds the image and text corresponding
         * to the selected value and returns the label, set up
         * to display the text and image.
         */
        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) 
        {
            //Get the selected index. (The index param isn't
            //always valid, so just use the value.)
            //int selectedIndex = ((Integer)value).intValue();

            if (isSelected) 
            {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } 
            else 
            {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            setText(value.toString());

            return this;
        }    
    }
}
